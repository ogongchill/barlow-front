name: GitHub ÏÉÅÌÉú ÏöîÏïΩ Î∞è Î≥ÄÍ≤Ω ÏïåÎ¶º

on:
  schedule:
    - cron: '0 0 * * *'  # Îß§Ïùº Ïò§Ï†Ñ 9Ïãú (KST)
  issues:
    types: [opened, closed, edited]
  pull_request:
    types: [opened, closed, reopened]
  milestone:
    types: [created, closed, edited]
  push:
  workflow_dispatch:

jobs:
  report-status:
    runs-on: ubuntu-latest

    steps:
      - name: GraphQL Ï°∞Ìöå
        run: |
          curl -s -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d '{
            "query": "query { repository(owner: \"ogongchill\", name: \"barlow-front\") { openIssues: issues(first: 10, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) { nodes { title url } totalCount } openPRs: pullRequests(first: 10, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) { nodes { title url } totalCount } milestones(first: 10) { nodes { title dueOn url issues { totalCount } closedIssues: issues(states: CLOSED) { totalCount } } } } }"
          }' https://api.github.com/graphql > result.json

      - name: Slack Î©îÏãúÏßÄ Ï†ÑÏÜ°
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TIME=$(date '+%Y-%m-%d %H:%M')
          OPEN_ISSUES=$(jq '.data.repository.openIssues.totalCount' result.json)
          OPEN_PRS=$(jq '.data.repository.openPRs.totalCount' result.json)
          RAW_TRIGGER=${GITHUB_EVENT_NAME:-unknown}
                    if [ "$RAW_TRIGGER" = "schedule" ]; then
            TRIGGER="ÏïÑÏπ® Ï†êÌò∏"
          else
            TRIGGER="$RAW_TRIGGER"
          fi
          
          MILESTONES=$(jq -c '.data.repository.milestones.nodes[]' result.json)
          FIELDS=()
          while read -r item; do
            MILESTONE_URL=$(echo "$item" | jq -r '.url')
            TITLE=$(echo "$item" | jq -r '.title')
            TITLE_FIELD="*<${MILESTONE_URL}|${TITLE}>*"
            DUE_RAW=$(echo "$item" | jq -r '.dueOn // empty')
            if [ -z "$DUE_RAW" ]; then
              DUE="ÏóÜÏùå"
            else
              DUE=$(date -d "$DUE_RAW" '+%Y-%m-%d')
            fi
            
            TOTAL=$(echo "$item" | jq '.issues.totalCount // 0')
            CLOSED=$(echo "$item" | jq '.closedIssues.totalCount // 0')
          
            if [ "$TOTAL" -eq "$CLOSED" ] && [ "$TOTAL" -ne 0 ]; then
              continue  # ÏôÑÎ£åÎêú ÎßàÏùºÏä§ÌÜ§ÏùÄ Í±¥ÎÑàÎúÄ
            fi
          
            REMAIN=$((TOTAL - CLOSED))
            PERCENT=$(awk -v total="$TOTAL" -v closed="$CLOSED" 'BEGIN { if (total == 0) print 0; else print int((closed / total) * 100) }')

            FIELD=$(jq -n --arg t "üìå *$TITLE_FIELD*" \
                           --arg p "*ÏôÑÎ£åÏú®:* ${PERCENT}%" \
                           --arg r "*ÎÇ®ÏùÄ Ïù¥Ïäà:* ${REMAIN}" \
                           --arg d "*ÎßàÍ∞êÏùº:* ${DUE}" \
            '{
              type: "section",
              fields: [
                { type: "section", text: { type: "mrkdwn", text: "*\($t)* \n \($p)\t\($r)\t\($d) "}},
                { type: "mrkdwn", text: $t },
                { type: "mrkdwn", text: "\($p)\n\($r)\n\($d)" }
              ]
            }')
            FIELDS+=("$FIELD")
          done <<< "$MILESTONES"
          
          # üëâ ÎßàÏùºÏä§ÌÜ§Ïù¥ Î™®Îëê ÏôÑÎ£åÎêòÏñ¥ FIELDSÍ∞Ä ÎπÑÏóàÏùÑ Í≤ΩÏö∞ Î∞©Ïñ¥ Ï≤òÎ¶¨
          if [ ${#FIELDS[@]} -eq 0 ]; then
            FIELD=$(jq -n '{
            type: "section",
            text: { type: "mrkdwn", text: "üìå *ÏßÑÌñâ Ï§ëÏù∏ ÎßàÏùºÏä§ÌÜ§ ÏóÜÏùå*" }
            }')
              FIELDS+=("$FIELD")
          fi
            
          FIELDS_JSON=$(printf "%s\n" "${FIELDS[@]}" | jq -s '.')

          ### Ïó¥Î†§ ÏûàÎäî PR Î™©Î°ù
          PR_LIST=$(jq -r '.data.repository.openPRs.nodes[] | "- <\(.url)|\(.title)>"' result.json | paste -sd '\n' -)
          [ -z "$PR_LIST" ] && PR_LIST="ÏóÜÏùå"
          ISSUE_LIST=$(jq -r '.data.repository.openIssues.nodes[] | "- <\(.url)|\(.title)>"' result.json | paste -sd '\n' -)
          [ -z "$ISSUE_LIST" ] && ISSUE_LIST="ÏóÜÏùå"

          PAYLOAD=$(jq -n \
          --arg time "$TIME" \
          --arg open_issues "$OPEN_ISSUES" \
          --arg open_prs "$OPEN_PRS" \
          --arg pr_list "$PR_LIST" \
          --arg issue_list "$ISSUE_LIST" \
          --arg trigger "$TRIGGER" \
          --argjson fields "$FIELDS_JSON" '
          {
            blocks: (
              [
                { type: "header", text: { type: "plain_text", text: "üìä GitHub Ï†ÄÏû•ÏÜå ÏÉÅÌÉú Î≥¥Í≥†" } },
                { type: "section", text: { type: "mrkdwn", text: "üïπÔ∏è*Ìä∏Î¶¨Í±∞:* \($trigger) at \($time) UTC"  } },
                { type: "section", text: { type: "mrkdwn", text: "üêõ *Open Issues:* \($open_issues)\nüîß *Open PRs:* \($open_prs)" } },
                { type: "divider" },
                { type: "section", text: { type: "plain_text", text: "‚úÖ Ïó¥Î¶∞ PR Î™©Î°ù", emoji: true } },
                { type: "section", text: { type: "mrkdwn", text: $pr_list } },
                { type: "divider" },
                { type: "section", text: { type: "plain_text", text: "üêû Ïó¥Î¶∞ Issue Î™©Î°ù", emoji: true } },
                { type: "section", text: { type: "mrkdwn", text: $issue_list } },
                { type: "divider" }
              ] + $fields
                      )
          }')

  
          echo "$PAYLOAD" | jq . # ÎîîÎ≤ÑÍπÖ Ï∂úÎ†•

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$SLACK_WEBHOOK_URL"
