import org.apache.commons.io.FileUtils

plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.barlow.front"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.barlow.front"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.release
            manifestPlaceholders = [
                    legacyExternalStorage: "true"
            ]
        }
    }

//    flavorDimensions "default"
//    productFlavors {
//        dev {
//            dimension "default"
////            applicationIdSuffix ".dev"
//            versionNameSuffix "-dev"
//        }
//        prod {
//            dimension "default"
//        }
//
//    }
}

flutter {
    source = "../.."
}
//
//android.applicationVariants.all { variant ->
//    def flavor = variant.flavorName
//    def buildType = variant.buildType.name
//
//    variant.outputs.all { output ->
//        def extension = output.outputFileName?.split("\\.")?.last() ?: "aab"
//        def versionName = variant.versionName
//        def newName = "barlow-${flavor}-${versionName}-${buildType}.${extension}"
//
//        output.outputFileName = newName
//    }
//}
//
//gradle.taskGraph.whenReady { taskGraph ->
//    if (taskGraph.hasTask(":app:bundleProdRelease")) {
//        def versionName = android.defaultConfig.versionName
//        def flavor = "prod"
//        def srcFile = file("$buildDir/outputs/bundle/${flavor}Release/app-${flavor}-release.aab")
//        def destFile = file("$buildDir/outputs/bundle/${flavor}Release/barlow-${flavor}-v${versionName}-release.aab")
//
//        tasks.named("bundleProdRelease").configure {
//            doLast {
//                println "✅ [Gradle Hook] bundleProdRelease 실행됨"
//                if (srcFile.exists()) {
//                    FileUtils.copyFile(srcFile, destFile)
//                    println "✅ Copied AAB to: ${destFile.name}"
//                } else {
//                    println "⚠️ AAB file not found: ${srcFile}"
//                }
//            }
//        }
//    }
////}
//gradle.taskGraph.whenReady { taskGraph ->
//    // 오직 AAB 빌드일 때만 Hook 실행
//    if (taskGraph.hasTask(":app:bundleProdRelease")) {
//        def flavor = "prod"
//        def versionName = android.defaultConfig.versionName
//        def srcFile = file("$buildDir/outputs/bundle/${flavor}Release/app-${flavor}-release.aab")
//        def destFile = file("$buildDir/outputs/bundle/${flavor}Release/barlow-${flavor}-v${versionName}-release.aab")
//
//        tasks.named("bundleProdRelease").configure {
//            doLast {
//                println "✅ [Gradle Hook] bundleProdRelease 실행됨"
//                if (srcFile.exists()) {
//                    FileUtils.copyFile(srcFile, destFile)
//                    println "✅ Copied AAB to: ${destFile.name}"
//                } else {
//                    println "⚠️ AAB file not found: ${srcFile}"
//                }
//            }
//        }
//    }
//}
